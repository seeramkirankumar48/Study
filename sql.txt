1.ssms is not a server by itself.it is a client tool which is
used to connect to the database server.

2.whenever we create a database two files are created automatically,
	mdf-master data file
	ldf-log data file
	create database database_name;
	alter database database_name set single_user with rollback immediate;
	alter database database_name modify name='new_name'
			(or)
	sp_renamedb 'oldname','new name'  

3.foreign key is used to make data integrity and intact
  whatever the data entered into the table is checked in the
  primary column of the referenced table 
  
	alter table table1_name add constraint constraint_name
	foreign key(table1_name_column) references table2_name(table2_name_column)

4.default constraint:if you do not enter the value then the default value will be kicked in
	
	alter table table_name add constraint constraint_name Default default_value for column_name
  to add new column:
	alter table table_name add column_name data_type
  to drop constraint:
        alter table table_name drop constraint constraint_name

5.cascading referential integrity:
	if the values in the referenced table is deleted/updated then the records in the foreign key 
  table become the orphan records.
	by default four actions are performed:
	1.noaction--no action is performed.
	2.setdefault--sets to default value.
	3.setnull--sets to null
	4.cascade--deletes/updates to the latest value.
	
	alter table table_name add constraint constraint_name
	foreign key(column) references table1_name(column)
	on delete set default/cascade

6.Check constraint is used to check the values before inserting into the table
  the value to be checked to be an boolean expression
	alter table table_name add constraint constraint_name CHeck (expression)

7.identity:value can be incremented based on the seed and increment value.
	create table tbl_name(column_name data_type identity(seed,increment))
  deleting the values in the table doesn't reset the identity column
  to fill the gaps in the identity row use:
   SET identity_insert tbl_name ON;& values to the table should be provided along with the column names
   when identity_insert is turned ON we cannot insert the values by not providing the identity column value.
  To reset the identity value use:
	DBCC checkident(tbl_name,RESEED,0)

8.to generate the identity value:
   scope_identity():it will return the identity value with in the same statement scope and same session
   @@identity:it will return the identity value with in the same session across any scope
   ident_current('tbl_name'):it will return the identity value for the particular table across any session

9.Unique key:Since a table contains only one primary key.to maintain uniqueness across all the columns unique key is used.
   unique key allows one null value.
  alter table tbl_name add constraint constraint_name unique(column_name)

10.Select:
   when distinct is used for two or more columns then the distinct values are returned across all the columns specified.
   if there are multiple filter use IN.
   Between 10 and 25 will return the values in between 10&25 and 10 value & 25 value.
   wildcards:
   %-represents occurence of zero or more characters
   _-represents occurence of exactly one character.
   to select the name's that start with the specified characters
    select * from table where name like '[MST]%'-- retrives names start with M,S,T
    doesn't start with MST use '[^MST]%'
   order by-- used to sort the results either in asc(default) or desc order.
   sort the order of two or more columns by:
   select * from tblPerson orderby name asc,Age desc
   If a table has large number of rows retrieving the data takes lot of time if you want to retrieve the sample data use top keyword.
   select top 10 * from table_name
   (or)
   select top 10 name,age from tblPerson

11.group by:
	group by will group by the columns in the group list it is used along with the aggregate functions.
   Aggregate=SUM,MAX,MIN,Count
   if the column is not in the group list then error will be thrown.
 diff b/w where and having
  1.
 	a.where is used in select,update,delete,insert
 	b.having is used in select
  2.
	a.where is used after select and before group by
	b.having is used after groupby
  3.     
	a.in where we cannot apply aggregate function
	b.in having we can apply aggregate function

12.joins are used to retrieve data from more than one table
    inner join:retrieve common rows from the tables.
    outer join:
	left join:retrieves common rows+ unmatched rows in the left table
	right join:retrieves common rows+ unmatched rows in the right table
	full join:retrieves common rows+ unmatched rows in the left table+ unmatched rows in the right table
    cross join: cartesian product rows ::rows in first table multiplied by rows in second table
	cross join doesn't require on condition

	select column_list 
	from table1 join table2 on condition
	join table3 on condition

13.Advanced or intelligent joins::
     Advanced joins are used to retrieve the data from the unmatched rows in the left table
	select column_list
	from table1 left join table2 on table1.column1=table2.column1
	where table2.column1 is null
     Advanced joins are used to retrieve the data from the unmatched rows in the right table
	select column_list
	from table1 right join table2 on table1.column1=table2.column1
	where table1.column1 is null
     Advanced joins are used to retrieve the data from the unmatched rows in the left table+unmatched rows in the right table.
	select column_list
	from table1 full join table2 on table1.column1=table2.column1
	where table2.column1 is null
	OR
	table1.column1 is null

14.self join:joining the table with itself.
      select column_list from table1 join table1 on
      table1.column1=table2.column2

15.ways to replace null values:
	ISNULL:ISNULL(expression,replacement_value)
	case stmt:case when exp then '' else '' end
	COALESCE

16.COALESCE:returns the first non-null value.
	COALESCE(firstname,middlename,lastname)

17.UNION && unionALL: used to select rows from two or more select queries.
   unionALL-combines all the rows irrespective of the duplicate values
   union--combines all the rows and eliminates the duplicate values.
   for union or unionall to work the datatype,number should be same.

   diff b/w union & joins:
   1.
	a.union is used to combine the resultset of two or more select queries.
	b.join is used to select the resultset based on the logical grouping of two or more tables.
   2.
	a.union is used to combine the row resultset from 2 or more tables.
	b.join is used to combine the column resultset from 2 or more tables.

18.Stored Procedures:
      SP's saves the group of sql queries and can be used as many times.
	
	create/Alter procedure procedure_name 
	@param1 data_type,@param2 data_type
	WITH Encryption //if you want the procedure to be encrypted(cannot be viewed with sp_helptext)
	AS
	Begin
	SQL_queries
	END
	
	To execute:
	exec procedure_name @param1_value,@param2_value
	exec procedure_name @param2=param2_value,@param1=param1_value

	To drop procedure:
	drop procedure procedure_name

19.Procedures with output parameters:
	returns value from the sp's
	
	create procedure procedure_name
	@param1 datatype
	@param2 datatype out
	as 
	begin
	//assign value to the out parameter
	select @param2=Count(ID) from tblEmployee
	end

	To execute
	declare @empcount int
	execute proc_name param_value,@empCount out
	print @empcount
        (or)	
	declare @empcount int
	execute proc_name @param2=@empCount out,@param1=Param1_value
	print @empcount
	
   System SP's:
	sp_help:gives metadata about the SP
	sp_helptext:gives the definition of SP
	sp_depends:gives the depends of the database object

20.SP return Values:
   the return value is used to indicate whether the Sp got executed successfully or not.
   the return value return 0-success or 1-failure.
   the return value returns only integer value.

	create proc proc_name
	as 
	begin
	return (select count(ID) from tblEmployee)
	end
	
	To execute
	declare @Count int
	exec @Count=proc_name
	Print @Count

21.Uses of SP's over Adhoc queries:
	1.retains and uses code execution plan
	2.code reusability
	3.reduces n/w traffice
	4.provides security (finer grained access--By providing access only to the proc not to the underlying tables).
	5.Avoids Sql injection attack (either by SP's or parameterized queries)

22.Built in String functions:
   1.Ascii:select ASCII('A')
   2.CHAR:select CHAR(65)
   3.LTRIM:removes the spaces in the front
   4.RTRIM:removes the spaces in the right
   5.LEN:returns the length of the string and it ignores the spaces on the right hand side.
   6.Lower:converts the string to lowercase
   7.Upper:converts the string to uppercase
   8.reverse:converts the string to reverse

23.more used string functions
   1.LEFT:gets the string from Left side --LEFT('aaa.com',5)-com
   2.Right:gets the string from right side --RIGHT('aaa.com',3)-com
   3.CHARindex:returns the position of the char in the expression
	CHARINDEX('@','aaa@aaa.com',1)--4
	CHARINDEX('@','aaa@aaa.com',1)+1--5
	CHARINDEX(string_to_search,string,occurence)
   4.substring:returns the substring from the string expression
	SUBSTRING('aaa@aaa.com',4,7)--aaa.com
	SUBSTRING(string,from_which_part,from_which_part_length)

24.some more string handling functions::
   1.Replicate:replicates the particular string with no.of times
	select replicate('*',5)---*****
   2.space:space function gives spaces for 'n' number of times specified
	select space(5) 
   3.patindex:patindex is used to check pattern of the string in the given string
	select patindex('%@outlook.com',seeramkirankumar@outlook.com)--gives index
   4.replace:replaces the string with another one
	select replace('microsoft.com','com','net')
   5.stuff:stuff's the string with the character specified.
	select stuff('88888',2,3(length_string),'*')-8***8

25.DateTime datatypes:
	1.time:only time
	2.date:only date
	3.datetime:date and time with ns
	4.datetime2:date and time with ns(with more precision)
	5.datetimeoffset:offset with UTC
	6.smalldatetime:date time without ns
	Getdate()--is used to get the current data where the sql server is installed
	sysdatetime()-more fractional than ns
	sysdatetimeoffset()-with offset

26.ISDate(): isdate functions validates whether the passed argument is an valid date or not
	select isdate(getdate())
	isdate gives 0 for failure and 1 for success.
   isdate() function returns the 0(failure) for datetime2 datatypes eventhough it is a valid date returns 0 because of long precision

   Day():select day(getdate())--day of the getdate()
   month():select month(getdate())--month of the getdate()
   year():select year(getdate())--year of the getdate()
   weekday():weekday function returns the name of the date.
   weekday():select datename(weekday,getdate())--dayname of the getdate()--EX:monday

27.datepart():datepart function returns the number of that particular date passed.
	the diff b/w datename() and datepart() is datepart returns the integer and datename returns nvarchar.
   select datepart(day,'some_date')--if it is sunday--returns 1
   dateadd():select dateadd(day/month/year,number_of_days_to_add,date)
   datediff():select datediff(day/month/year,old_date,new_date)

28.cast and convert:Both are used to convert datatype of one into another.
	cast:cast is based on ansi(portable across databases) standards
	select cast(empno as nvarchar) as 'EmpNo'
	select cast(getdate() as date)
	convert:convert is MS standards
	select convert(data_type,String_to_convert,style[optional])
	select convert(nvarchar,getdate(),101)
	In convert to control the formatting of (styles) the datatype needs to be converted to nvarchar otherwise the style property is ignored.

29.mathematical functions:
	abs:gives a positive number
		select abs(-100)=100
	ceiling:top value
		select ceiling(101.5)=102;select ceiling(-15.2)=15
	floor:low value
		select floor(101.5)=101;select floor(-15.2)=16
	power:power value
		select power(2,3)=2^3=8
	rand:rand value returns the random value between 0 and 1 if no parameter is passed.
		select rand([parameter(optional)])
	if a parameter is passed then rand returns the same value.
	to generate a random number between 1000
	select rand()*1000;--this will give fractional part.
	to eliminate the fractional part use floor or ceil:
	select floor(rand()*1000)
	square:squares the number
	select square(2)=2^2=4
	sqrt:square root value
	select sqrt(4)=2
	round:rounds the passed value to the nearest number
	select round(number,length_to_be_rounded,[truncate or round]) 
	optional parameter:0-round;non-zero-truncate	
	select round(number)
	///more clarity needed...

30.Scalar Function:
	scalar function returns one and only single value.
   scalar function may or maynot have parameters.
   the returned value can be of any datatype except text,ntext,image,cursor and timestamp.
	syntax:
		create function fun_name(@parameter data_type,....)
		returns data_type
		AS
		BEGIN
		return parameter_value
		END
	to call the function:use two part:dbo.fun_name(); (or) database_name.dbo.fun_name();

31.inline Table Valued Functions:
	Returns a table
	syntax:
		create function fun_name(@parameter1 data_type)
		returns table
		as
		return (select query)
	while defining the table valued functions don't use begin and end
	The end result of the return table is dependent on the select query defined in the function.
	The table valued functions can be joined with the other tables.
	to call the table valued function:(call as it was a table)
	select * from fun_name('param_value')
	underlying table can be updated with the help of inline table valued functions
	update fun_name set value=new_value where value=old_value
	update ufn_Employees set gender='M' where empId=1


32.multi statement table valued functions:
	returns the table
	syntax:
		create function fun_name()
		returns @Table_variable Table(param1 datatype1,param2 datatype2)
		as
		begin
		insert into @Table
		select @param1_value,@param2_Value from table

		return
		end
	to select :: select * from fun_name()
	only return is specified to return the table.
	inline tabled valued functions has better performance compared to the multistatement table valued functions.
	it's possible to update the underlying table with the help of inline tabled functions which is not possible with multi statement table valued functions.	

33.

note points::
1.a table can have only one primary key but more than one unique key.
2.while selecting entire column list use entire column list rather than using "*"
  this will help in improving the performance of the query.
3.to return the highest salary of the person in the table:
  select top 1 * from tblPerson order by salary desc
4.tables are relate to each other using foregin key.
5.to check whether the data contains the null value use -- where column_value is null
6.for retreiving the count value instead of retrieving it from count(*)(uses lot of time) use a column name specified.
7.for cross joins on condition is not required.
8.diff b/w procedures and scalar defined functions are:
	A.scalar functions can be used in the select queries.
	B.Procedures cant be used in select queries.
9.
